name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: tripwand-backend
  REGION: asia-northeast3  # Seoul region for better latency in Korea

jobs:
  # Test job - runs on all PRs and pushes
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Build application
      run: go build -v ./cmd/main.go
    
    - name: Run linter
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        skip-cache: true

  # Build and deploy job - only runs on main branch pushes
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker asia-northeast3-docker.pkg.dev
    
    - name: Build Docker image
      run: |
        docker build -t asia-northeast3-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA .
        docker tag asia-northeast3-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA asia-northeast3-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:latest
    
    - name: Push Docker image
      run: |
        docker push asia-northeast3-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA
        docker push asia-northeast3-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:latest
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image asia-northeast3-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10 \
          --concurrency=100 \
          --timeout=300 \
          --port=8080 \
          --set-env-vars="PORT=8080,ENV=production" \
          --set-secrets="DB_HOST=alloydb-host:latest,DB_USER=alloydb-user:latest,DB_PASSWORD=alloydb-password:latest,DB_NAME=alloydb-database:latest,DB_PORT=alloydb-port:latest,GOOGLE_AI_API_KEY=google-ai-api-key:latest,JWT_SECRET=jwt-secret:latest,ALLOWED_ORIGINS=allowed-origins:latest" \
          --ingress=all \
          --execution-environment=gen2 \
          --cpu-throttling \
          --startup-cpu-boost
    
    - name: Get service URL
      id: deploy
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
    
    - name: Test deployment
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "Testing health endpoint..."
        curl -f $SERVICE_URL/health || exit 1
        echo "‚úÖ Health check passed"
        
        echo "Testing travel generation API..."
        RESPONSE=$(curl -s -X POST $SERVICE_URL/api/v1/travel/generate \
          -H "Content-Type: application/json" \
          -d '{"destination": "ÏÑúÏö∏", "duration": 2}' \
          -w "%{http_code}")
        
        HTTP_CODE="${RESPONSE: -3}"
        if [ "$HTTP_CODE" == "200" ]; then
          echo "‚úÖ Travel API test passed"
        else
          echo "‚ùå Travel API test failed with HTTP $HTTP_CODE"
          exit 1
        fi
    
    - name: Setup custom domain mapping
      if: success()
      run: |
        # Map custom domain to the service
        gcloud run domain-mappings create \
          --service=$SERVICE_NAME \
          --domain=api.tripwand.online \
          --region=$REGION \
          --platform=managed || echo "Domain mapping may already exist"
        
        echo "üìå Domain setup status:"
        echo "‚úÖ Backend API: https://api.tripwand.online"
        echo "üîÑ Frontend: https://www.tripwand.online (setup separately)"
        echo "üìã SSL certificate will be automatically provisioned (15-60 minutes)"